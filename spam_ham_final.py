# -*- coding: utf-8 -*-
"""spam-ham.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ygRPQEFwtaAMZFTZkVRyJb801XJxBjOx
"""

import pandas as pd
import numpy as np
import re
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from nltk.stem import WordNetLemmatizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.preprocessing import sequence
from keras.models import Sequential
from keras import regularizers
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding , BatchNormalization
from keras.models import Model
from keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from nltk.tokenize import word_tokenize
from keras.callbacks import EarlyStopping
import pkg_resources
import matplotlib.pyplot as plt

import nltk
nltk.download('stopwords')
nltk.download('wordnet')

data = pd.read_csv("/content/drive/MyDrive/topicmodelling/spam.csv", encoding = "latin-1")

data = data[['v1', 'v2']]

data = data.rename(columns = {'v1': 'label', 'v2': 'text'})

sns.countplot(data.label)
plt.xlabel('Label')
plt.title('Number of ham and spam messages')

X = data.text
Y = data.label
le = LabelEncoder()
Y = le.fit_transform(Y)
Y = Y.reshape(-1,1)

lemmatizer = WordNetLemmatizer()
stopwords = set(stopwords.words('english'))

def review_messages(msg):
  msg = msg.lower()
  msg=re.sub(r"http\S+",' ',msg)
  msg=re.sub(r'\s',' ',msg)
  msg=re.sub(r'\(.*?\)', ' ',msg)
  msg=re.sub(r'\{.*?\}', ' ',msg)
  msg=re.sub(r'\w*\d\w*',' ',msg)
  msg=re.sub(r'\W+',r' ',msg)
  msg = [word for word in msg.split() if word not in stopwords]
  msg=' '.join([lemmatizer.lemmatize(word) for word in msg])
  return msg

X=X.apply(lambda x: review_messages(str(x)))

count=[str(x).split() for x in X]
words=[len(x) for x in count]
max_len=max(words)
print(max_len)

para=''
wordlist=[]
for x in X:
    small=str(x)
    para+=small
wordlist=para.split()
words_count=len(set(wordlist))
print(words_count)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)

max_words = 11500
max_len = 80
tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)
sequences = tok.texts_to_sequences(X_train)
sequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)

print(sequences)

sequences_matrix.shape

test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)

path_to_glove_file = r"/content/drive/MyDrive/topicmodelling/glove.6B.100d.txt"

embeddings_index = {}
with open(path_to_glove_file,encoding='utf-8') as f:
    for line in f:
        word, coefs = line.split(maxsplit=1)
        coefs = np.fromstring(coefs, "f", sep=" ")
        embeddings_index[word] = coefs

print("Found %s word vectors." % len(embeddings_index))

embedding_dim = 100 
hits = 0
misses = 0
embedding_matrix = np.zeros(((len(tok.word_index) + 1, embedding_dim)))
for word, i in tok.word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        embedding_matrix[i] = embedding_vector
        hits += 1
    else:
        misses += 1
print("Converted %d words (%d misses)" % (hits, misses))

def mymodel():
  model=Sequential()
  model.add(Embedding(*embedding_matrix.shape, weights=[embedding_matrix], trainable=False))
  model.add(LSTM(16))
  model.add(Dense(16,kernel_regularizer=regularizers.l1(),activation ='tanh'))
  model.add(BatchNormalization())
  model.add(Dropout(0.5))
  model.add(Dense(4,kernel_regularizer=regularizers.l1(), activation='softmax'))
  return model

model=mymodel()
 model.compile(loss='sparse_categorical_crossentropy',optimizer=Adam(),metrics=['accuracy'])
 model.summary()

model.fit(sequences_matrix,Y_train,batch_size=16,epochs=100,
          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])

accr = model.evaluate(test_sequences_matrix,Y_test)

print(f'Test accuracy : {accr[1]:.4f} \nTest loss : {accr[0]:.4f}')

trial="""text."""

trial=review_messages(trial)
print(trial)

trial_sequences = tok.texts_to_sequences([trial])

pred=model.predict(trial_sequences)

print(pred)

p=np.argmax([pred])

print(p)

print(le.inverse_transform([p]))
